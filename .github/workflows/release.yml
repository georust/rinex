name: Release

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  publish_crates:
    name: Release
    runs-on: ubuntu-latest
    continue-on-error: true
    if: github.ref_type == 'tag'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Publish
        env:
          TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          cargo login $TOKEN
          cargo publish --allow-dirty
  
  build:
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Determine archive name
      shell: bash
      run: |
        echo "ARCHIVE=rinex-${{ github.ref_name }}" >> $GITHUB_ENV

    - name: Creating directory for archive
      shell: bash
      run: |
        mkdir -p "$ARCHIVE"
        cp {README.md,LICENSE} "$ARCHIVE"

    - name: Gzip archive (Unix)
      shell: bash
      run: |
        tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
        shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
        echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
        echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3     
      with:
        name: ${{ env.ASSET }}
        path: |
          ${{ env.ASSET }}
    
    - name: Upload artifacts (cksum)
      uses: actions/upload-artifact@v3     
      with:
        name: ${{ env.ASSET_SUM }}
        path: |
          ${{ env.ASSET_SUM }}
          
  release:
    runs-on: ubuntu-latest
    needs: ['build']
    # continue even though we failed to download or upload one
    # or more artefacts
    continue-on-error: true
    steps:
    - name: Create Release
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/create-release@v1
      with:
        draft: true
        tag_name: ${{ github.ref_name }}
        release_name: ${{ github.ref_name }}

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with: 
        name: rinex-${{ github.ref_name }}
    
    - name: Upload asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: rinex-${{ github.ref_name }}
        asset_name: rinex-${{ github.ref_name }}
        asset_content_type: application/gzip
